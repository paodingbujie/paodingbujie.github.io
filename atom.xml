<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>庖哥频道</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://paodingbujie.github.io/"/>
  <updated>2017-12-14T18:13:42.165Z</updated>
  <id>https://paodingbujie.github.io/</id>
  
  <author>
    <name>庖哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django2.0自学笔记(4) 新建站点和博客应用</title>
    <link href="https://paodingbujie.github.io/note/Django2.0%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/django_4/"/>
    <id>https://paodingbujie.github.io/note/Django2.0自学笔记/django_4/</id>
    <published>2017-12-12T16:12:23.000Z</published>
    <updated>2017-12-14T18:13:42.165Z</updated>
    
    <content type="html"><![CDATA[<p>从这里开始，正式进入Django开发，首先我们利用框架创建站点和博客应用的雏形，骨架有了以后慢慢填内容即可。</p><h2 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h2><h3 id="创建Django工程"><a href="#创建Django工程" class="headerlink" title="创建Django工程"></a>创建Django工程</h3><p>命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject yourprojectname</span><br></pre></td></tr></table></figure></p><p>比如，在E盘新建一个目录workspace，然后进入目录，Shift+右键，选择打开命令行窗口。我们创建一个名叫mysite的工程，代码如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace&gt; django-admin startproject mysite</span><br></pre></td></tr></table></figure></p><p>可以看到E:\workspace下面多了一个mysite文件夹。</p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><p>接着上一步，在命令行窗口中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace&gt; <span class="built_in">cd</span> mysite</span><br><span class="line">E:\workspace\mysite&gt; python manager.py runserver</span><br></pre></td></tr></table></figure></p><p>在浏览器中输入<a href="http://127.0.0.1:8000/" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8000/</a> 回车，就能看到成功飞起提示了。<br><img src="http://wx3.sinaimg.cn/mw690/0070SULVgy1fmg7kuj8rmj30nc0dpmxj.jpg" alt=""></p><h3 id="创建博客应用"><a href="#创建博客应用" class="headerlink" title="创建博客应用"></a>创建博客应用</h3><p>进入mysite文件夹，我们又看到了一个mysite文件夹和一个manage.py。解释一下：</p><ul><li>E:\workspace\mysite\mysite: 这个目录下面存放的是整个站点（工程）的配置文件。</li><li>E:\workspace\mysite\manage.py: 这个文件主要是用来执行Django命令的，马上我们创建应用就要用到。</li></ul><p>回到命令行窗口，确保当前目录为E:\workspace\mysite，我们创建一个应用名叫myblog(注：一个工程下可以创建多了应用)，命令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace\mysite&gt; python manage.py startapp myblog</span><br></pre></td></tr></table></figure></p><p>完成后E:\workspace\mysite下又多了一个myblog文件夹。里面文件都是myblog应用的骨架文件，开发就是在这些文件中添加或修改内容，暂时先放放，以后详讲。</p><p>庖哥这里要吐槽一下，Django的工程目录结构刚接触会让人困惑，为什么工程文件夹mysite下面还有个mysite文件夹(放站点配置文件)，庖哥想，为啥不换个其他名，比如conf。唉，没办法，人家的规定，我们自己分清楚就好。</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在修改之前，我们要先做一件事，在Mysql数据库中为我们这个Django工程建立数据库myblog。我们打开cmd命令行，依次输入<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -pyourpwd </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> myblog;</span><br></pre></td></tr></table></figure></p><p>-p后面是你的mysql登录密码，中间没有空格。还没完，Django连接Mysql需要驱动，官方文档推荐mysqlclient，那我们就装这个,命令行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient==1.3.12</span><br></pre></td></tr></table></figure></p><p>完了以后打开站点配置文件E:\workspace\mysite\mysite\settings.py，进行修改。</p><ol><li>把我们新建的应用myblog加入工程</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'myblog'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li><p>修改数据库默认连接。Django默认使用本地的sqlite，现在改为我们的mysql数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'myblog'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'yourpwd'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改语言项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="IDE方式"><a href="#IDE方式" class="headerlink" title="IDE方式"></a>IDE方式</h2><p>用Pycharm来创建Django工程和应用就简单多了。前一篇笔记已经讲过如何创建工程，这里不再重复。在工程下创建应用也比较简单，点击Tools–&gt;Run manage.py Task，可能会出现异常，不用管。直接在下方输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manage.py@mysite &gt; startapp myblog</span><br></pre></td></tr></table></figure><p>在Pycharm中启动Django服务也很简单，直接点击右上方的绿箭头即可<br><img src="http://wx3.sinaimg.cn/mw690/0070SULVgy1fmguc5kdmyj30al03fq2u.jpg" alt=""></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://blog.csdn.net/Tomonkey/article/details/50922279" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/Tomonkey/article/details/50922279</a></li><li><a href="https://docs.djangoproject.com/en/2.0/ref/settings/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.djangoproject.com/en/2.0/ref/settings/</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从这里开始，正式进入Django开发，首先我们利用框架创建站点和博客应用的雏形，骨架有了以后慢慢填内容即可。&lt;/p&gt;
&lt;h2 id=&quot;命令行方式&quot;&gt;&lt;a href=&quot;#命令行方式&quot; class=&quot;headerlink&quot; title=&quot;命令行方式&quot;&gt;&lt;/a&gt;命令行方式&lt;/h2
      
    
    </summary>
    
      <category term="Django2.0自学笔记" scheme="https://paodingbujie.github.io/categories/Django2-0%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Django，新建，站点，应用" scheme="https://paodingbujie.github.io/tags/Django%EF%BC%8C%E6%96%B0%E5%BB%BA%EF%BC%8C%E7%AB%99%E7%82%B9%EF%BC%8C%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Django2.0自学笔记(3) 开发环境搭建</title>
    <link href="https://paodingbujie.github.io/note/Django2.0%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/django_3/"/>
    <id>https://paodingbujie.github.io/note/Django2.0自学笔记/django_3/</id>
    <published>2017-12-10T17:23:33.000Z</published>
    <updated>2017-12-14T05:30:29.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h2><p>庖哥操作系统以及安装的软件清单如下：</p><ul><li>Windows 7  64位旗舰版</li><li>Python 3.6.1 （python 3以上版本都可以）</li><li>Django 2.0</li><li>Mysql 5.6.38 （其他数据库也可）</li><li>Pycharm (可选)</li></ul><h2 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h2><p>根据自己操作系统的位数（32or64）下载对应版本的Python进行安装，因为我们将学习Django2.0，所以务必安装Python 3.0以上版本。安装完成后请用cmd命令行检查，输入如下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;python -V</span><br><span class="line">Python 3.6.1</span><br></pre></td></tr></table></figure><h2 id="Django安装"><a href="#Django安装" class="headerlink" title="Django安装"></a>Django安装</h2><p>利用python pip进行安装，在cmd命令行中输入如下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.0</span><br></pre></td></tr></table></figure></p><p>完了以后检查版本，依次在命令行窗口中输入如下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">import django</span><br><span class="line">django.get_version()</span><br></pre></td></tr></table></figure></p><h2 id="Mysql数据库安装"><a href="#Mysql数据库安装" class="headerlink" title="Mysql数据库安装"></a>Mysql数据库安装</h2><p>Django虽然自带了sqlite数据库，可用于开发，但是生产环境还是要Mysql或者其他关系型数据库。庖哥装的是Mysql 5.6.38，<a href="https://dev.mysql.com/downloads/mysql/5.6.html#downloads" rel="external nofollow noopener noreferrer" target="_blank">下载地址</a>，下载zip文件，完了以后解压。</p><ol><li>进入mysql目录，找到my.ini文件，如果没有，就把my-default.ini复制一份重命名为my.ini</li><li><p>打开my.ini，看到大部分都被#注释掉了。我们进行修改，完了以后样子如下，其中basedir是Mysql所在目录，datadir是将来数据的存放目录，character-set-server和default-character-set=utf8是用来让数据库支持中文的，sql_mode是默认设置。庖哥其他都采用了默认设置，如果有其他需要，可以自行设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=D:\mysql-5.6.38-winx64 </span><br><span class="line">datadir=D:\mysql-5.6.38-winx64\data</span><br><span class="line">character-set-server=utf8</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></li><li><p>安装数据库。进入mysql的bin目录，庖哥的是D:\programme\mysql\mysql-5.6.38-winx64\bin，Shift+右键，选择<strong>在此处打开窗口</strong>，进入命令行（注意用管理员身份，否则权限不够），输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure></li><li><p>启动数据库。输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></li><li><p>登录和密码。启动后用root登录，第一次没有密码</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><p>给root用户添加密码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpassword');</span><br></pre></td></tr></table></figure></p><p>以后就可以用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -pyourpassword</span><br></pre></td></tr></table></figure></p><p>进行登录了，注意-p和yourpassword之间<strong>没有空格</strong>。</p><ol><li>给mysql数据库添加环境变量。这样你以后就不用每次进入bin目录再敲命令了。计算机–&gt;右键属性–&gt;高级系统设置–&gt;环境变量–&gt;系统变量里找到Path–&gt;把”D:\mysql-5.6.38-winx64\bin;”加到末尾。</li></ol><h2 id="Pycharm-可选"><a href="#Pycharm-可选" class="headerlink" title="Pycharm (可选)"></a>Pycharm (可选)</h2><p>刚才庖哥使用pip安装Django，如果你使用Pycharm来开发Django的话，这些安装和启动的操作都可以交给这个ide自动完成。你只要选择File–&gt;New Project–&gt;选择Django即可。如果Pycharm没有安装Django，会自动去下载最新版本(目前是2.0)，你也可以在设置中选择你要的Django版本。庖哥用的是2017版Pycharm。<br><img src="http://wx4.sinaimg.cn/mw690/0070SULVgy1fmf2nj6z5uj30lu0dj0tx.jpg" alt="http://wx4.sinaimg.cn/mw690/0070SULVgy1fmf2nj6z5uj30lu0dj0tx.jpg"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.djangoproject.com/en/2.0/topics/install/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.djangoproject.com/en/2.0/topics/install/</a></li><li><a href="http://www.cnblogs.com/lmh2072005/p/5656392.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/lmh2072005/p/5656392.html</a></li><li><a href="http://www.cnblogs.com/wangs/p/3346767.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/wangs/p/3346767.html</a></li><li><a href="https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html" rel="external nofollow noopener noreferrer" target="_blank">https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;所需软件&quot;&gt;&lt;a href=&quot;#所需软件&quot; class=&quot;headerlink&quot; title=&quot;所需软件&quot;&gt;&lt;/a&gt;所需软件&lt;/h2&gt;&lt;p&gt;庖哥操作系统以及安装的软件清单如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 7  64位旗舰版&lt;/li&gt;
&lt;li&gt;Pyt
      
    
    </summary>
    
      <category term="Django2.0自学笔记" scheme="https://paodingbujie.github.io/categories/Django2-0%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Django，开发环境" scheme="https://paodingbujie.github.io/tags/Django%EF%BC%8C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Django2.0自学笔记(2) Django开发框架简介与自学流程</title>
    <link href="https://paodingbujie.github.io/note/Django2.0%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/django_2/"/>
    <id>https://paodingbujie.github.io/note/Django2.0自学笔记/django_2/</id>
    <published>2017-12-10T01:14:20.000Z</published>
    <updated>2017-12-13T21:16:59.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Django是一个用Python开发的开源免费Web框架，始于2005年，开发文档齐全，社区比较成熟，最大的优势是快速开发，框架中的各种官方和非官方的功能插件，应有尽有，最值得一提的是Django自带的一个后台管理系统，一下子就帮你省去很多工作。当然也有人诟病Django的大而全，使得框架相当笨重，性能差。大家也总拿Django和其他Python框架比，如Flask，Tornado等。怎么说的，庖哥觉得，各有各的好，最终决定选择哪个，不完全由性能决定。学习成本，开发时间，开发及运维成本都是考虑的因素，我们必须根据实际需要来做选择，这才是始终正确的。</p><h2 id="学习流程"><a href="#学习流程" class="headerlink" title="学习流程"></a>学习流程</h2><p>庖哥不准备按照看官方文档的顺序来学习，不如以项目为驱动，用Django搭建一个笔记博客，样子就像庖哥的Hexo博客一样。遇到不会的，直接上官网查，现学现用，无招胜有招，这才是最高境界嘛，哇哈哈。。。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://zh.wikipedia.org/wiki/Django" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/Django</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Django是一个用Python开发的开源免费Web框架，始于2005年，开发文档齐全，社区比较成熟，最大的优势是快速开发，框架中的各种官方
      
    
    </summary>
    
      <category term="Django2.0自学笔记" scheme="https://paodingbujie.github.io/categories/Django2-0%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Django" scheme="https://paodingbujie.github.io/tags/Django/"/>
    
      <category term="自学" scheme="https://paodingbujie.github.io/tags/%E8%87%AA%E5%AD%A6/"/>
    
      <category term="流程" scheme="https://paodingbujie.github.io/tags/%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Django2.0自学笔记(1) Web开发框架，Web服务器，应用服务器之间的关系</title>
    <link href="https://paodingbujie.github.io/note/Django2.0%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/django_1/"/>
    <id>https://paodingbujie.github.io/note/Django2.0自学笔记/django_1/</id>
    <published>2017-12-09T22:32:40.000Z</published>
    <updated>2017-12-13T05:31:56.726Z</updated>
    
    <content type="html"><![CDATA[<p>在介绍Django框架之前，让我们先来了解一下什么是Web框架，Web服务器，应用服务器。</p><h2 id="访问Web资源的过程"><a href="#访问Web资源的过程" class="headerlink" title="访问Web资源的过程"></a>访问Web资源的过程</h2><p>我们访问Web资源一般都遵循<strong>“请求-应答”</strong>的方式。客户端在浏览器输入Web资源地址发送给服务端，服务端分析地址，返回客户端想要的资源，或者返回错误，比如404资源未找到等。其实这个过程背后是客户端与服务端进行了报文的交互和解析。</p><p><img src="http://wx2.sinaimg.cn/mw690/0070SULVgy1fmdft0n6iqj30wx0bjmyk.jpg" alt=""></p><p>我们来看一下http报文到底长什么样子，打开chrome浏览器，F12打开开发者工具,地址栏中输入网易地址，得到如下图结果。</p><p><img src="http://wx3.sinaimg.cn/mw690/0070SULVgy1fmdh4ncn7dj30li0gyjtf.jpg" alt=""></p><h2 id="Web服务器和应用服务器的区别"><a href="#Web服务器和应用服务器的区别" class="headerlink" title="Web服务器和应用服务器的区别"></a>Web服务器和应用服务器的区别</h2><ul><li><p>Web服务器：专门负责Web静态资源请求。什么是静态请求呢，简单一点，就是不用与后台数据库打交道，直接由Web服务器找到资源后返回的请求。静态资源每次访问都返回相同的结果，比如jpg,css,js，静态html等文件。现在流行的三个Web服务器是Apache，Nginx，IIS。</p></li><li><p>应用服务器：专门处理Web动态请求。什么是动态请求呢，简单一点，就是每次都要根据用户提交的参数，去数据库搜寻数据，完了以后再动态组装成一个html返回给用户，所谓动态就是这个组装过程是当场进行的，每次请求来了都要创建新的html，这个html的内容是变化的（相对于静态html）。现在能做动态请求的技术很多，PHP，JSP，ASP.Net，Python，Nodejs，Ruby，所对应的应用服务器也各不相同。</p></li></ul><p>Web服务器和应用服务器一般协同工作如下图</p><p><img src="http://wx3.sinaimg.cn/mw690/0070SULVgy1fmdj2nlc2zj313h0eadhn.jpg" alt=""></p><h2 id="Web开发框架和应用服务器"><a href="#Web开发框架和应用服务器" class="headerlink" title="Web开发框架和应用服务器"></a>Web开发框架和应用服务器</h2><p>先假设我们没有Web开发框架，应用服务器收到一个动态请求后，我们怎么办呢，首先要解析发来的http报文，分析出有用的参数，然后选择对应的处理函数，再根据参数去数据库取数据，进行逻辑处理，当一切数据资源都齐全后，我们要开始生成最终返回给Web服务器的html了，肯定是一顿字符串拼接操作。太麻烦啦，程序员当然要偷懒，赶紧把这些重复繁琐的工作挑出来，在应用服务器的上面再建一层服务，专门处理这个。这样Web开发框架就运运而生了，它让我们可以不用管报文的解析与组装，参数提取，路由选择，html渲染等等，我们只需按照框架的结构，往其中填写逻辑处理内容即可。我们把上面的图再修改一下，加入Web开发框架。</p><p><img src="http://wx3.sinaimg.cn/mw690/0070SULVgy1fmdmw0x05zj31480jx0v7.jpg" alt=""></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://www.cnblogs.com/hazir/p/what_is_web_framework.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/hazir/p/what_is_web_framework.html</a></li><li><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832653051fd44e44e4f9e4ed08f3e5a5ab550358d000" rel="external nofollow noopener noreferrer" target="_blank">https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832653051fd44e44e4f9e4ed08f3e5a5ab550358d000</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在介绍Django框架之前，让我们先来了解一下什么是Web框架，Web服务器，应用服务器。&lt;/p&gt;
&lt;h2 id=&quot;访问Web资源的过程&quot;&gt;&lt;a href=&quot;#访问Web资源的过程&quot; class=&quot;headerlink&quot; title=&quot;访问Web资源的过程&quot;&gt;&lt;/a&gt;访问W
      
    
    </summary>
    
      <category term="Django2.0自学笔记" scheme="https://paodingbujie.github.io/categories/Django2-0%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web框架" scheme="https://paodingbujie.github.io/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Web服务器" scheme="https://paodingbujie.github.io/tags/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="应用服务器" scheme="https://paodingbujie.github.io/tags/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Django" scheme="https://paodingbujie.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hexo加GitHub快速搭建个人免费博客详细步骤</title>
    <link href="https://paodingbujie.github.io/note/Hexo%E5%BB%BA%E7%AB%99/hexo_github_blog/"/>
    <id>https://paodingbujie.github.io/note/Hexo建站/hexo_github_blog/</id>
    <published>2017-12-07T20:42:22.000Z</published>
    <updated>2017-12-10T01:46:15.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>Hexo： 一个利用Node.js开发，支持Markdown的开源静态博客生成器。它能帮您把markdown的md文件转成漂亮的静态html文件。</p></li><li><p>GitHub Pages: GitHub推出的一个免费静态页面托管服务。它能让您把静态站点部署到GitHub上，并提供github.io的域名。</p></li></ul><h2 id="软件安装（Windows）"><a href="#软件安装（Windows）" class="headerlink" title="软件安装（Windows）"></a>软件安装（Windows）</h2><ul><li><p>Node.js: Hexo依赖Node.js, 所以先安装它。 安装<a href="https://nodejs.org/zh-cn/" rel="external nofollow noopener noreferrer" target="_blank">地址</a>。安装完后需确认一下，打开命令行，点击“开始”–&gt;运行–&gt;输入cmd–&gt;回车。输入<strong>path</strong>回车，检查path变量是否包含nodejs路径，比如<strong>C:\Program Files\nodejs\</strong>。继续在命令行中输入<strong>node –version</strong>回车，检查安装的Nodejs版本。到此Nodejs安装完毕。</p></li><li><p>Git: 这个对IT人员来说应该很熟悉，之前没有接触过的道友，也没关系,先安装，后面详细讲使用，<a href="https://git-scm.com/downloads" rel="external nofollow noopener noreferrer" target="_blank">下载地址</a>。</p></li><li><p>Hexo: 首先自己新建一个Hexo安装目录，比如在E盘新建一个Hexo目录，进入该目录<strong>E:\Hexo</strong>，右键选择<strong>Git Bash Here</strong>。</p></li></ul><p><img src="http://wx1.sinaimg.cn/mw690/0070SULVgy1fm9093scd3j3075092mx6.jpg" alt=""></p><p>接下来我们访问<a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo官网</a>, 在首页下方，我们可以找到安装步骤如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>然后在刚才右键打开的<strong>Git Bash</strong>中，一条一条输入上面指令即可。如果速度慢，可以挂个代理。好了，现在就能在本地看到自己的博客页面了，打开浏览器输入：<strong><a href="http://localhost:4000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/</a></strong> 回车。</p><p><img src="http://wx1.sinaimg.cn/mw690/0070SULVgy1fm9t1eo7o5j30z80p411e.jpg" alt=""></p><h2 id="Hexo更换主题和设置"><a href="#Hexo更换主题和设置" class="headerlink" title="Hexo更换主题和设置"></a>Hexo更换主题和设置</h2><p>Hexo默认使用的是landscape主题,可以到Hexo官网的<a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">主题</a>，选择喜欢的进行更换。这里以<a href="https://github.com/iissnan/hexo-theme-next" rel="external nofollow noopener noreferrer" target="_blank">NexT</a>为例,先Ctrl+C停止Hexo服务,然后在<strong>Git Bash</strong>中输入如下命令（注意当前bash目录为E:\Hexo\blog）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>完成以后要修改两个配置文件:</p><ul><li>站点配置(E:\Hexo\blog_config.yml):<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next <span class="comment"># 修改为NexT主题</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>主题配置（E:\Hexo\blog\themes\next_config.yml）<br>可以参考下面<strong>博客常用功能设置</strong>的内容，或者访问<a href="http://theme-next.iissnan.com/getting-started.html" rel="external nofollow noopener noreferrer" target="_blank">NexT官网</a>,根据实际需要进行配置。</li></ul><h2 id="站点部署"><a href="#站点部署" class="headerlink" title="站点部署"></a>站点部署</h2><h3 id="登录GitHub创建仓库"><a href="#登录GitHub创建仓库" class="headerlink" title="登录GitHub创建仓库"></a>登录GitHub创建仓库</h3><p>如果还没有GitHub的同学可以先<a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">申请</a>,然后登录。比如你的git账号为<strong>tobiasahlin</strong>,新建名为<strong>tobiasahlin.github.io</strong>的仓库。踩坑提醒：仓库名必须严格按照上面格式，否则以后用浏览器访问tobiasahlin.github.io时，将是404错误。</p><h3 id="把本地静态文件部署到GitHub"><a href="#把本地静态文件部署到GitHub" class="headerlink" title="把本地静态文件部署到GitHub"></a>把本地静态文件部署到GitHub</h3><ol><li><p>安装hexo-deployer-git插件，在Bash中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>为GitHub添加SSH Key（SSH推送文件免密码登录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure></li></ol><p>然后一直回车即可，最后打开<strong>C:\Users\Administrator.ssh\id_rsa.pub</strong>文件，复制所有文件内容。登录GitHub，在settings–&gt;SSH and GPG keys–&gt;New SSH key,在title中给你的key取个名，在Key中，把刚才复制的文件内容拷贝过来，保存。</p><ol><li><p>修改站点配置(E:\Hexo\blog_config.yml)<br>找到“deploy”字段，修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:tobiasahlin/tobiasahlin.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>提交本地文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 提交文件前先生成一下静态文件</span></span><br><span class="line">hexo d <span class="comment"># 提交文件到GitHub仓库</span></span><br></pre></td></tr></table></figure></li><li><p>浏览器中输入<strong>tobiasahlin.github.io</strong>，就能看到博客啦（可能要等10分钟，GitHub需要时间处理）</p></li></ol><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 等于hexo generate 每次有内容更新后，都要生成一下静态文件</span></span><br><span class="line">hexo s <span class="comment"># 等于hexo server 启动本地服务</span></span><br><span class="line">hexo d <span class="comment"># 等于hexo deploy提交文件到GitHub仓库</span></span><br><span class="line">hexo clean <span class="comment"># 删除db.json和public文件夹，之后hexo g可重新生成</span></span><br><span class="line">hexo init [folder] <span class="comment"># 新建一个网站。如果没有设置文件夹，默认在目前的文件夹建立网站。</span></span><br><span class="line">hexo new [layout] &lt;title&gt; <span class="comment"># 新建一篇文章。没有layout,将用默认设置</span></span><br></pre></td></tr></table></figure><h2 id="博客常用功能设置"><a href="#博客常用功能设置" class="headerlink" title="博客常用功能设置"></a>博客常用功能设置</h2><p>打开主题配置（E:\Hexo\blog\themes\next_config.yml）</p><h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><p>找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  shortname:</span><br><span class="line">  count: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">changyan: </span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  appid:</span><br><span class="line">  appkey:</span><br></pre></td></tr></table></figure></p><p>同学可以自行选择disqus还是畅言，到他们官网注册以后可以把相关信息填入即可。</p><h3 id="网站访问统计"><a href="#网站访问统计" class="headerlink" title="网站访问统计"></a>网站访问统计</h3><p>找到”不蒜子统计”,把enable改为true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: 本站访客数</span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 本站总访问量</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: 本文总阅读量</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p><h3 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h3><p>找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line">reward_comment: 多谢打赏</span><br><span class="line">wechatpay: /images/wechatpay.jpg</span><br><span class="line">alipay: /images/alipay.jpg</span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure></p><p>把开头注释号#去掉，填写微信和支付宝的二维码图片地址即可。</p><h3 id="订阅微信公众号"><a href="#订阅微信公众号" class="headerlink" title="订阅微信公众号"></a>订阅微信公众号</h3><p>找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wechat_subscriber:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  qcode: /uploads/wechat-qcode.jpg</span><br><span class="line">  description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！</span><br></pre></td></tr></table></figure></p><p>把开头注释号#去掉,填写微信二维码图片地址即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" rel="external nofollow noopener noreferrer" target="_blank">https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/</a></li><li><a href="https://www.cnblogs.com/ayseeing/p/3572582.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/ayseeing/p/3572582.html</a></li><li><a href="https://hexo.io/zh-cn/docs/commands.html" rel="external nofollow noopener noreferrer" target="_blank">https://hexo.io/zh-cn/docs/commands.html</a></li><li><a href="http://theme-next.iissnan.com/theme-settings.html" rel="external nofollow noopener noreferrer" target="_blank">http://theme-next.iissnan.com/theme-settings.html</a></li><li><a href="https://xuanwo.org/2015/03/26/hexo-intor/" rel="external nofollow noopener noreferrer" target="_blank">https://xuanwo.org/2015/03/26/hexo-intor/</a></li><li><a href="http://www.jianshu.com/p/834d7cc0668d" rel="external nofollow noopener noreferrer" target="_blank">http://www.jianshu.com/p/834d7cc0668d</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hexo： 一个利用Node.js开发，支持Markdown的开源静态博客生成器。它能帮您把markdown的md文件转成
      
    
    </summary>
    
      <category term="Hexo建站" scheme="https://paodingbujie.github.io/categories/Hexo%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="Hexo" scheme="https://paodingbujie.github.io/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://paodingbujie.github.io/tags/GitHub/"/>
    
      <category term="博客" scheme="https://paodingbujie.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
