{"pages":[{"title":"关于庖哥频道","date":"2017-12-07T16:24:00.000Z","path":"about/index.html","text":"关于博客好记性不如烂笔头，有啥想法赶紧记下来，这里是庖哥的私房菜笔记。欢迎各路道友前来闲聊。 关于博主好像对什么都感兴趣，但是又无一精通。平时爱好当厨子，阅读各类书籍，写写小程序，逛逛知乎科普。其他以后再补。。。 联系博主 可以在下方评论区给庖哥留言 或者谷歌邮箱：paodingbujie"},{"title":"Tags","date":"2017-12-07T18:25:40.414Z","path":"tags/index.html","text":""},{"title":"Categories","date":"2017-12-07T18:27:48.101Z","path":"categories/index.html","text":""}],"posts":[{"title":"Django开发框架简介","date":"2017-12-10T01:14:20.000Z","path":"note/Django框架/django_2/","text":"Django是一个用Python开发的Web框架，。 参考资料","tags":[{"name":"Django","slug":"Django","permalink":"https://paodingbujie.github.io/tags/Django/"}],"categories":[{"name":"Django框架","slug":"Django框架","permalink":"https://paodingbujie.github.io/categories/Django框架/"}]},{"title":"Web开发框架，Web服务器，应用服务器之间的关系","date":"2017-12-09T22:32:40.000Z","path":"note/Django框架/django_1/","text":"再介绍Django框架之前，让我们先来了解一下什么是Web框架，Web服务器，应用服务器。 访问Web资源的过程我们访问Web资源一般都遵循“请求-应答”的方式。客户端在浏览器输入Web资源地址发送给服务端，服务端分析地址，返回客户端想要的资源，或者返回错误，比如404资源未找到等。其实这个过程背后是客户端与服务端进行了报文的交互和解析。 我们来看一下http报文到底长什么样子，打开chrome浏览器，F12打开开发者工具,地址栏中输入网易地址，得到如下图结果。 Web服务器和应用服务器的区别 Web服务器：专门负责Web静态资源请求。什么是静态请求呢，简单一点，就是不用与后台数据库打交道，直接由Web服务器找到资源后返回的请求。静态资源每次访问都返回相同的结果，比如jpg,css,js，静态html等文件。现在流行的三个Web服务器是Apache，Nginx，IIS。 应用服务器：专门处理Web动态请求。什么是动态请求呢，简单一点，就是每次都要根据用户提交的参数，去数据库搜寻数据，完了以后再动态组装成一个html返回给用户，所谓动态就是这个组装过程是当场进行的，每次请求来了都要创建新的html，这个html的内容是变化的（相对于静态html）。现在能做动态请求的技术很多，PHP，JSP，ASP.Net，Python，Nodejs，Ruby，所对应的应用服务器也各不相同。 Web服务器和应用服务器一般协同工作如下图 Web开发框架和应用服务器先假设我们没有Web开发框架，应用服务器收到一个动态请求后，我们怎么办呢，首先要解析发来的http报文，分析出有用的参数，然后选择对应的处理函数，再根据参数去数据库取数据，进行逻辑处理，当一切数据资源都齐全后，我们要开始生成最终返回给Web服务器的html了，肯定是一顿字符串拼接操作。太麻烦啦，程序员当然要偷懒，赶紧把这些重复繁琐的工作挑出来，在应用服务器的上面再建一层服务，专门处理这个。这样Web开发框架就运运而生了，它让我们可以不用管报文的解析与组装，参数提取，路由选择，html渲染等等，我们只需按照框架的结构，往其中填写逻辑处理内容即可。我们把上面的图再修改一下，加入Web开发框架。 参考资料 http://www.cnblogs.com/hazir/p/what_is_web_framework.html https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832653051fd44e44e4f9e4ed08f3e5a5ab550358d000","tags":[{"name":"Django","slug":"Django","permalink":"https://paodingbujie.github.io/tags/Django/"},{"name":"Web框架","slug":"Web框架","permalink":"https://paodingbujie.github.io/tags/Web框架/"},{"name":"Web服务器","slug":"Web服务器","permalink":"https://paodingbujie.github.io/tags/Web服务器/"},{"name":"应用服务器","slug":"应用服务器","permalink":"https://paodingbujie.github.io/tags/应用服务器/"}],"categories":[{"name":"Django框架","slug":"Django框架","permalink":"https://paodingbujie.github.io/categories/Django框架/"}]},{"title":"Hexo加GitHub快速搭建个人免费博客详细步骤","date":"2017-12-07T20:42:22.000Z","path":"note/Hexo建站/hexo_github_blog/","text":"简介 Hexo： 一个利用Node.js开发，支持Markdown的开源静态博客生成器。它能帮您把markdown的md文件转成漂亮的静态html文件。 GitHub Pages: GitHub推出的一个免费静态页面托管服务。它能让您把静态站点部署到GitHub上，并提供github.io的域名。 软件安装（Windows） Node.js: Hexo依赖Node.js, 所以先安装它。 安装地址。安装完后需确认一下，打开命令行，点击“开始”–&gt;运行–&gt;输入cmd–&gt;回车。输入path回车，检查path变量是否包含nodejs路径，比如C:\\Program Files\\nodejs\\。继续在命令行中输入node –version回车，检查安装的Nodejs版本。到此Nodejs安装完毕。 Git: 这个对IT人员来说应该很熟悉，之前没有接触过的道友，也没关系,先安装，后面详细讲使用，下载地址。 Hexo: 首先自己新建一个Hexo安装目录，比如在E盘新建一个Hexo目录，进入该目录E:\\Hexo，右键选择Git Bash Here。 接下来我们访问Hexo官网, 在首页下方，我们可以找到安装步骤如下。 12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 然后在刚才右键打开的Git Bash中，一条一条输入上面指令即可。如果速度慢，可以挂个代理。好了，现在就能在本地看到自己的博客页面了，打开浏览器输入：http://localhost:4000/ 回车。 Hexo更换主题和设置Hexo默认使用的是landscape主题,可以到Hexo官网的主题，选择喜欢的进行更换。这里以NexT为例,先Ctrl+C停止Hexo服务,然后在Git Bash中输入如下命令（注意当前bash目录为E:\\Hexo\\blog）：1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 完成以后要修改两个配置文件: 站点配置(E:\\Hexo\\blog_config.yml):1theme: next # 修改为NexT主题 主题配置（E:\\Hexo\\blog\\themes\\next_config.yml）可以参考下面博客常用功能设置的内容，或者访问NexT官网,根据实际需要进行配置。 站点部署登录GitHub创建仓库如果还没有GitHub的同学可以先申请,然后登录。比如你的git账号为tobiasahlin,新建名为tobiasahlin.github.io的仓库。踩坑提醒：仓库名必须严格按照上面格式，否则以后用浏览器访问tobiasahlin.github.io时，将是404错误。 把本地静态文件部署到GitHub 安装hexo-deployer-git插件，在Bash中输入： 1$ npm install hexo-deployer-git --save 为GitHub添加SSH Key（SSH推送文件免密码登录） 1$ ssh-keygen -t rsa -C \"youremail@example.com\" 然后一直回车即可，最后打开C:\\Users\\Administrator.ssh\\id_rsa.pub文件，复制所有文件内容。登录GitHub，在settings–&gt;SSH and GPG keys–&gt;New SSH key,在title中给你的key取个名，在Key中，把刚才复制的文件内容拷贝过来，保存。 修改站点配置(E:\\Hexo\\blog_config.yml)找到“deploy”字段，修改为 1234deploy: type: git repo: git@github.com:tobiasahlin/tobiasahlin.github.io.git branch: master 提交本地文件 12hexo g # 提交文件前先生成一下静态文件hexo d # 提交文件到GitHub仓库 浏览器中输入tobiasahlin.github.io，就能看到博客啦（可能要等10分钟，GitHub需要时间处理） Hexo常用命令123456hexo g # 等于hexo generate 每次有内容更新后，都要生成一下静态文件hexo s # 等于hexo server 启动本地服务hexo d # 等于hexo deploy提交文件到GitHub仓库hexo clean # 删除db.json和public文件夹，之后hexo g可重新生成hexo init [folder] # 新建一个网站。如果没有设置文件夹，默认在目前的文件夹建立网站。hexo new [layout] &lt;title&gt; # 新建一篇文章。没有layout,将用默认设置 博客常用功能设置打开主题配置（E:\\Hexo\\blog\\themes\\next_config.yml） 评论功能找到123456789disqus: enable: false shortname: count: truechangyan: enable: false appid: appkey: 同学可以自行选择disqus还是畅言，到他们官网注册以后可以把相关信息填入即可。 网站访问统计找到”不蒜子统计”,把enable改为true123456789101112131415busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: 本站访客数 site_uv_footer: 人次 # custom pv span for the whole site site_pv: true site_pv_header: 本站总访问量 site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: 本文总阅读量 page_pv_footer: 次 添加打赏功能找到12345# Rewardreward_comment: 多谢打赏wechatpay: /images/wechatpay.jpgalipay: /images/alipay.jpg#bitcoin: /images/bitcoin.png 把开头注释号#去掉，填写微信和支付宝的二维码图片地址即可。 订阅微信公众号找到1234wechat_subscriber: enabled: true qcode: /uploads/wechat-qcode.jpg description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！ 把开头注释号#去掉,填写微信二维码图片地址即可。 参考 https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/ https://www.cnblogs.com/ayseeing/p/3572582.html https://hexo.io/zh-cn/docs/commands.html http://theme-next.iissnan.com/theme-settings.html https://xuanwo.org/2015/03/26/hexo-intor/ http://www.jianshu.com/p/834d7cc0668d","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://paodingbujie.github.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://paodingbujie.github.io/tags/GitHub/"},{"name":"博客","slug":"博客","permalink":"https://paodingbujie.github.io/tags/博客/"}],"categories":[{"name":"Hexo建站","slug":"Hexo建站","permalink":"https://paodingbujie.github.io/categories/Hexo建站/"}]}]}